import { LessonCard } from '@/pages/main/leftcontent/lessons/features/LessonCard';
import { useEffect, useState } from 'react';
import "./Lessons.css"
import KUTGLoading from '../../features/KUTGLoading';
import KUTGTabHeader from '../../features/KUTGTabHeader';


export default function Lessons() {
    const [lessons, setLessons] = useState<any>("");
    const [selectedDay, setSelectedDay] = useState<string | null>(null);
    const [userLoaded, setUserLoaded] = useState(false);

    const [user, setUser] = useState({
        name: "–ì–æ—Å—Ç—å",
        group: null as string | null,
        admin: null as boolean | null,
        login: null as string | null,
        pass: null as string | null,
    });

    useEffect(() => {
        const stored = localStorage.getItem("user");
        if (stored) {
            try {
                const parsed = JSON.parse(stored);
                console.log("Parsed user:", parsed);
                if (parsed.name) setUser(parsed);
            } catch (e) {
                console.error("–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∞ —é–∑–µ—Ä–∞:", e);
            }
        }
        setUserLoaded(true);
    }, []);

    const getLessons = async (): Promise<any> => {
        const userLogin = user.login;
        console.log("–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è!!!");
        if (!userLogin) {
            console.warn("‚ùå user login –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç");
            return "";
        }

        try {
            console.log("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å:", { userLogin });
            const response = await fetch("/api/lessons/today", {
                method: "POST",
                credentials: "include",
            });

            console.log("üì• –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:", response.status);

            if (!response.ok) {
                const msg = await response.text();
                console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞:", msg);
                throw new Error(msg);
            }

            const data = await response.json();
            console.log("‚úÖ –£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–∏–ª–∏:", data);
            return data;
        } catch (e) {
            console.error("‚ö†Ô∏è –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:", e);
            return "";
        }
    };

    useEffect(() => {
        console.log(">>> –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–¥ getLessons():", {
            userLoaded,
            login: user.login,
        });

        if (!userLoaded || !user.login) {
            console.log("‚ùå –£—Å–ª–æ–≤–∏—è –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω—ã, getLessons –Ω–µ –≤—ã–∑–≤–∞–Ω");
            return;
        }

        console.log("üöÄ –í—ã–∑—ã–≤–∞—é getLessons()");
        getLessons().then((res) => {
            setLessons(res);

            const today = new Date();
            const daysMap: Record<number, string> = {
                0: "–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ",
                1: "–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
                2: "–≤—Ç–æ—Ä–Ω–∏–∫",
                3: "—Å—Ä–µ–¥–∞",
                4: "—á–µ—Ç–≤–µ—Ä–≥",
                5: "–ø—è—Ç–Ω–∏—Ü–∞",
                6: "—Å—É–±–±–æ—Ç–∞",
            };

            const todayName = daysMap[today.getDay()];
            const dayKeys = Object.keys(res ?? {});
            const foundDay = dayKeys.find(
                (day) => day.toLowerCase().includes(todayName)
            );

            if (foundDay) {
                setSelectedDay(foundDay);
                console.log("‚úÖ –í—ã–±—Ä–∞–Ω –¥–µ–Ω—å:", foundDay);
            } else {
                console.warn("‚ùå –°–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏");
            }
        });
    }, [userLoaded, user.login, user.pass]);


    const schedule = lessons ?? {};

    const selectedLessons = selectedDay ? schedule[selectedDay] ?? [] : [];

    return (
        <>
            <> 
                <KUTGTabHeader title='–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è' />
                {
                    !lessons && (
                        <KUTGLoading />
                    )
                }
                {lessons && selectedLessons.map((lesson: any, i: number) => {
                    const [rawStart, rawEnd] = (lesson.time || "").split(" - ");
                    const startTime = rawStart?.replace(".", ":") ?? "";
                    const endTime = rawEnd?.replace(".", ":") ?? "";

                    return (
                        <LessonCard
                            key={i}
                            lesson={{
                                name: `${lesson.subject} (${lesson.type})`,
                                startTime: startTime,
                                endTime: endTime,
                                room: lesson.cabinet,
                                teacher: lesson.teacher,
                            }}
                        />
                    );
                })}
            </>
        </>
    );
}
